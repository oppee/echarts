<?php
namespace HQ\Controller;
/**
 * @author HeQi
 * @email info@heqi.hk
 */
class TopiccategoryController extends BaseController {

    //模型配置, 1. label, 2. tips 3. type, 4. data source, 5. special logic
    private $tca = array();
    public $tbName = 'topic_category';
    //高级筛选
    public $status_all = array(
        array('status'=>'hidden', 'value'=>0, 'title'=>'显示', 'class'=>'success'),
        array('status'=>'hidden', 'value'=>1, 'title'=>'隐藏', 'class'=>'inverse'),
        array('status'=>'hot', 'value'=>1, 'title'=>'推荐', 'class'=>'success'),
        array('status'=>'hot', 'value'=>0, 'title'=>'未推', 'class'=>'inverse'),
        array('status'=>'lock', 'value'=>1, 'title'=>'锁定', 'class'=>'success'),
        array('status'=>'lock', 'value'=>0, 'title'=>'未锁', 'class'=>'inverse'),
    );

  protected function init() {
    //高级筛选
    $this->assign('status_all', $this->status_all);

    //分类关联
    $categories = '';
    $current = '';
    if (ACTION_NAME == 'edit') {
      $id = $this->_get('id');
      $current = M($this->tbName)->where('id = ' . $id)->getField('parent_id');
    } else {
      $current = $this->_get('category');
    }
    $categories = $this->getCategoryTree(0, $current,'Topic_category');
    $this->assign('category', $categories);

    //配置字段
    $this->tca = array(
      'hidden' => array(
        'label' => '是否显示',
        'type' => 'toggle_button',
        'data' => '0' //checkbox value
      ),
     
      'hot' => array(
        'label' => '是否推荐',
        'type' => 'toggle_button',
        'data' => '1'
      ),
     /* 'top' => array(
        'label' => '是否置顶',
        'type' => 'toggle_button',
        'data' => '1'
      ),*/
      'lock' => array(
        'label' => '是否锁定',
        'type' => 'toggle_button',
        'data' => '1'
      ),
      'sorting' => array(
        'label' => '排列顺序',
        'type' => 'text'
      ),
      'hit' => array(
        'label' => '访问次数',
        'type' => 'text'
      ),
	   'name' => array(
        'label' => '分类名称',
        'type' => 'text',
        'required' => true
      ),
      'parent_id' => array(
        'label' => '父级分类',
        'type' => 'select_tree',
        'data' => $categories,
      ),
	  
     /* 'type' => array(
        'label' => '显示类型',
        'type' => 'radio',
        'data' => array(array(0, '文字列表视图'), array(1, '图片列表视图'), array(2, '图文列表视图'))
      ),
      'alias' => array(
        'label' => '分类别名',
        'type' => 'text',
        'help' => '请填写英文单词，中间不要有空格'
      ),*/
	  'image' => array(
        'label' => '分类图片',
        'type' => 'image'
      ),
      'remark' => array(
        'label' => '分类备注',
        'type' => 'textarea'
      ),
      
      /*'meta_title' => array(
        'label' => '页面标题',
        'type' => 'text',
        'help' => '一般不超过80个字符'
      ),
      'meta_keywords' => array(
        'label' => '页面关键字',
        'type' => 'text',
        'help' => '如有多个，请在每个之间使用半角逗号（,）分隔',
      ),
      'meta_description' => array(
        'label' => '页面描述',
        'type' => 'textarea',
        'help' => '一般不超过200个字符',
      ),*/
    );
  }

  /**
   * 列表页面
   */
  public function index() {
    $this->init(); //加载初始化数据
    import('@.Util.Page'); // 导入分页类
    $Obj = D($this->tbName); //实例化对象

    $Where = "deleted=0";
    //高级搜索 数据状态
    $Where_status = ' and ( ';
    $Where_status_info = '';
    foreach($this->status_all as $k=>$v){
        if(I('request.'.$v['status'])!=''){
            $I_status = I('request.'.$v['status']);
            if(in_array($v['value'], $I_status)){
                $Where_status_info .= " or `".$v['status']."`='".$v['value']."' ";
            }
        }
    }
    if($Where_status_info==''){
        unset($Where_status);
    }else{
        $Where_status .= substr($Where_status_info, 3).' ) ';
        $Where .= $Where_status;
    }
    if (I('request.keyword')!='') {
        $I_keyword = trim(I('request.keyword'));
        $Where .=' and (id LIKE "%' . $I_keyword . '%" OR name LIKE "%' . $I_keyword . '%")';
    }

    $category = I('request.category');
    if ($category) {
      $ids = array();
      $rs = $this->getPathAndClass($category, 'topic_category', true);
      if (count($rs)) {
        foreach ($rs as $v) {
          $ids[] = $v['id'];
        }

        $ids = implode(',', $ids);
        $Where .= " and (parent_id in (" . $ids . ") OR id = " . $category . ")";
      }
    }

    //控制分页显示条数
    if(I('post.limit_num')!=''){
        session('page_limit_num', I('post.limit_num'));
    }
    //控制列表排序
    $sorting = I('get.sorting') ? I('get.sorting') : 'id';
    $order = I('get.order') ? I('get.order') : 'desc';
    $limit_num = $_SESSION['page_limit_num'] ? $_SESSION['page_limit_num'] : 10;
    
    $Page = new \HQ\Util\Page($Obj->where($Where)->count(), $limit_num); // 实例化分页类 传入总记录数和每页显示的记录数
    $list = $Obj->where($Where)->order($sorting.' '.$order)->limit($Page->firstRow . ',' . $Page->listRows)->select();
    //echo $Obj->getLastSql();exit;
    // print_r($list);exit;
    $this->assign('list', $list); // 赋值数据集
    $this->assign('page', $Page->show()); // 分页显示输出
    $this->display(); // 输出模板
  }

  /*
   * 编辑数据
   */

  public function edit() {
    $this->save();
  }

  /*
   * 保存数据
   */

  public function save() {
    $this->init();
    //编辑数据
    $id = I('request.id') ? I('request.id') : null;
    $info = M($this->tbName)->where('id = ' . $id)->find();
    if (IS_POST) {
    //当前分类下记录数
    $_POST['total'] = $this->getCategorySum($id, 'topic');
        foreach ($_POST as $key => $val) {
        //处理POST数据
        if (is_array($val)) {
            $_POST[$key] = implode(",", $val);
        }
        if (@$this->tca[$key]['required'] && !$val) {
            $this->error($this->tca[$key]['label'] . '是必填项!');
        }
    }
    if ($id) {
        $ids = $this->getPathAndClass($id, 'topic_category', true);
        foreach ($ids as $v) {
            if (I('post.parent_id') == $v['id']) {
                $this->error('所选择的上级分类不能是当前分类或者当前分类的下级分类！');
                exit;
            }
        }
    }
    //处理图片宽度高度
    $_POST['thumb_width'] = preg_replace("/\s|　/","",$_POST['thumb_width']);
    $_POST['thumb_height'] = preg_replace("/\s|　/","",$_POST['thumb_height']);

        //删除文件 begin **********************************
        $path = $this->Config['path_upload'] . CONTROLLER_NAME . '/';
        if ($info && $info['image'] && $_POST['delete_image'] == '1') {
            $file_path = $path;
            $this->delInfoFile($file_path, $info['image']);
        } else {
            unset($_POST['image']);
        }
        //删除文件 end **********************************
        //文件上传 begin **********************************
        if (count($_FILES) && isset($_FILES['image'])) {
            $save_path = ''; // 设置附件上传目录
            $extent_path = '';
            $thumb_width = '';
            $thumb_height = '';

            $upload = $this->uploadFile('image', $path, $save_path, $extent_path, $thumb_width, $thumb_height);

            if (is_array($upload) && $upload['upload']) {
                $_POST['image'] = $upload['info'];
            } else {
                $this->error($upload['info']);
            }
        }
        //文件上传 end **********************************

      $Obj = D($this->tbName);
      $result = $Obj->create();
      if (!$result) {
        $this->error($Obj->getError());
      } else {
        if (!isset($_POST['hidden'])) {
          $Obj->hidden = 1;
        }
        if (!isset($_POST['top'])) {
          $Obj->top = 0;
        }
        if (!isset($_POST['hot'])) {
          $Obj->hot = 0;
        }
        if (!isset($_POST['lock'])) {
          $Obj->lock = 0;
        }

        $alias = trim($_POST['alias']) ? trim($_POST['alias']) : trim($_POST['name']);
				
		import('HQ.Util.ChinesePinyin'); // 导入转化拼音类
		$Pinyin = new \ChinesePinyin();
		$Obj->alias = $Pinyin->TransformWithoutTone($alias, '', FALSE);
        

        $Obj->tstamp = time();
        
        if ($id) {
          $Obj->where(array('id' => $id))->save();
          $message = '编辑成功!';
        } else {
          $Obj->crdate = time();
          $id = $Obj->add();
          if (trim($_POST['sorting']) == '') {
            $Obj->where(array('id' => $id))->save(array('sorting' => $id));
          }

          $message = '添加成功!';
        }

        $this->success($message, U(CONTROLLER_NAME . '/index', 'kept=1'));
        exit;
      }
    }
    //自动渲染字段
    parent::autoFields($this->tca, $info);
    $this->display('info');
  }
   
}

?>