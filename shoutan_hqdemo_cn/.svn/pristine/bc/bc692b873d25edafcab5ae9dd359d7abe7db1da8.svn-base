<?php
namespace HQ\Controller;
/**
 *
 * @author HeQi, info@heqi.hk
 */
class AttributeController extends BaseController
{
	//模型配置, 1. label, 2. tips 3. type, 4. data source, 5. special logic
	private $tca = array();
	public $tbName = CONTROLLER_NAME;

	protected function init()
	{
		if (ACTION_NAME == 'edit') {
			$id = $this->_get('id');
			$current = M($this->tbName)->where('id = ' . $id)->getField('parent_id');
		}

		$categories = $this->getCategoryTree(0, $current, 'attribute');
		//print_r($categories);die;
		$this->assign('category', $categories);
		//配置字段
		$this->tca = array(
			'hidden' => array(
				'label' => '显示',
				'type' => 'toggle_button',
				'data' => '0' //checkbox value
			),
			'name' => array(
				'label' => '属性名称',
				'type' => 'text',
				'required' => true
			),
			'parent_id' => array(
				'label' => '所属属性',
				'type' => 'select_tree',
				'data' => $categories,
				'help' =>'如颜色材质等。 如果不选择，就默认为顶级分类'
			),
			'description' => array(
				'label' => '属性描述',
				'type' => 'textarea',
			),
		);
	}

	/*
     * 列表页面
     */
	public function index()
	{
		$this->init();	//加载初始化数据
		$Obj = D($this->tbName); //实例化对象
		$Where = "deleted=0";
		//高级搜索 数据状态
		$Where_status = ' and ( ';
		$Where_status_info = '';
		foreach($this->status_all as $k=>$v){
			if(I('request.'.$v['status'])!=''){
				$I_status = I('request.'.$v['status']);
				if(in_array($v['value'], $I_status)){
					$Where_status_info .= " or `".$v['status']."`='".$v['value']."' ";
				}
			}
		}
		if($Where_status_info==''){
			unset($Where_status);
		}else{
			$Where_status .= substr($Where_status_info, 3).' ) ';
			$Where .= $Where_status;
		}
		if (I('request.keyword')!='') {
			$I_keyword = trim(I('request.keyword'));
			$Where .=' and (id LIKE "%' . $I_keyword . '%" OR name LIKE "%' . $I_keyword . '%")';
		}

		$category = I('request.category');
		if ($category) {
			$ids = array();
			$rs = $this->getPathAndClass($category, 'attribute', true);
			if (count($rs)) {
				foreach ($rs as $v) {
					$ids[] = $v['id'];
				}

				$ids = implode(',', $ids);
				$Where .= " and (parent_id in (" . $ids . ") OR id = " . $category . ")";
			}
		}
		//控制分页显示条数
		if(I('post.limit_num')!=''){
			session('page_limit_num', I('post.limit_num'));
		}
		//控制列表排序
		$sorting = I('get.sorting') ? I('get.sorting') : 'id';
		$order = I('get.order') ? I('get.order') : 'desc';
		$limit_num = $_SESSION['page_limit_num'] ? $_SESSION['page_limit_num'] : 10;

		$Page = new \HQ\Util\Page($Obj->where($Where)->count(), $limit_num); // 实例化分页类 传入总记录数和每页显示的记录数
		$list = $Obj->where($Where)->order($sorting.' '.$order)->limit($Page->firstRow . ',' . $Page->listRows)->select();

		$this->assign('list', $list); // 赋值数据集
		$this->assign('page', $Page->show()); // 分页显示输出
		$this->display(); // 输出模板
	}

	/*
     * 编辑数据
     */
	public function edit() {
		$this->save();
	}

	/*
     * 保存数据
     */
	public function save() {
		$this->init();
		//编辑数据
		$id = I('request.id') ? I('request.id') : null;
		$info = M($this->tbName)->where('id = ' . $id)->find();

		if (IS_POST) {
			foreach ($_POST as $key => $val) {
				//处理POST数据
				if (is_array($val)) {
					$_POST[$key] = implode(",", $val);
				}
				if (@$this->tca[$key]['required'] && !$val) {
					$this->error($this->tca[$key]['label'] . '是必填项!');
				}
			}

            if($_POST['parent_id'] != 0){
                $parent_id = M($this->tbName)->where('id = ' . $_POST['parent_id'])->getField('parent_id');
                if($parent_id != 0){
                    $this->error('所属属性必须选择一级属性');
                }
            }

			$Obj = D($this->tbName);
			$result = $Obj->create();
			if (!$result) {
				$this->error($Obj->getError());
			} else {
				if (!isset($_POST['hidden'])) {
					$Obj->hidden = 1;
				}
				if ($id) {
					$Obj->tstamp = time();
					$Obj->where(array('id' => $id))->save();
					$message = '编辑成功!';
				} else {
					$Obj->crdate = time();
					$Obj->tstamp = time();
					$id = $Obj->add();
					$message = '添加成功!';
				}
				$this->success($message, U(CONTROLLER_NAME . '/index', 'kept=1'));
				exit;
			}
		}
		//自动渲染字段
		parent::autoFields($this->tca, $info);
		$this->display('info');
	}

}

?>